version: '3' # 파일 규격 버전

services: # 이 항목 밑에 실행하려는 컨테이너 들을 정의
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - 80:80
      - 443:443
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./static:/usr/share/nginx/html
    depends_on:
      - web
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot: #certbot 컨테이너 추가
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: always

  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: test
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      timeout: 5s

  web:
    build: ./backend
    depends_on:
      - db
      - rabbitmq
    ports:
      - "8000:8000"
    volumes:
      - ./backend/:/app/
    restart: always
    environment:
      WAIT_HOSTS: db:3306, rabbitmq:5672
    expose:
      - "8000"

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    volumes:
      - ./frontend/:/frontend
      - ./frontend/node_modules/:/frontend/node_modules
    tty: true

  celery_worker:
    build: ./backend
    command: celery -A backend worker --loglevel=info
    volumes:
      - ./backend/:/app/
    depends_on:
      - web
      - rabbitmq
    restart: always

  celery_beat:
    build: ./backend
    command: celery -A backend beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend/:/app/
    depends_on:
      - web
      - rabbitmq
    restart: always

  prometheus:
    image: prom/prometheus
    volumes:
      - ./backend/prometheus:/app/etc/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
