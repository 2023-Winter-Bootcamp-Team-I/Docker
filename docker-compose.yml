version: '3' # 파일 규격 버전

services: # 이 항목 밑에 실행하려는 컨테이너 들을 정의
  # 임의로 추가했습니다
  backend:
    # 환경 설정 부분
    env_file:
      - ./settings/.env
    build:
      context: ./backend
      dockerfile: dockerfile
    container_name: backend
    volumes:
      - ./backend:/backend
    # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    restart: on-failure
    ports:
      - "8000:8000"
    # 가상 네트워크 연결
    links:
      - mysql:mysql
    networks:
      - monitor
    depends_on:
      - db
    expose:
      - 8000

  # 임의로 추가했습니다
  frontend:
    container_name: frontend
    # 환경 설정 부분
    env_file:
      - ./settings/.env
    build:
      # context : 현재 폴더의 frontend 폴더에 있는 도커파일을 쓰겠다
      context: ./frontend
    command: [ "npm", "start" ]
    # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/frontend/src # 가상 네트워크 연결
    networks:
      - monitor
    tty: true
    stdin_open: true
    depends_on:
      - backend

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: always

  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: test
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      timeout: 5s

  web:
    build: .
    depends_on:
      - db
      - rabbitmq
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    restart: always
    environment:
      WAIT_HOSTS: db:3306, rabbitmq:5672

  celery_worker:
    build: .
    command: celery -A backend worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - web
      - rabbitmq
    restart: always

  celery_beat:
    build: .
    command: celery -A backend beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    depends_on:
      - web
      - rabbitmq
    restart: always

  # 추가한 부분
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: root
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # 일단 이렇게 해보자
    ports:
      - "9090:9090"
    networks:
      - monitor # 일단 monitor로 설정
    depends_on:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning # 일단 이렇게 해보자
    ports:
      - "3000:3000"
    networks:
      - monitor # 일단 monitor로 설정
    depends_on:
      - prometheus
