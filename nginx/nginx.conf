user nginx;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    upstream backend {
        server web:8000;
    }

    types {
        application/javascript js;
        text/css css;
        text/html html;
        image/svg+xml svg;
    }

    server {
        listen 80;
        server_name bookg.site;
        charset utf-8;

        # Http로 들어온 요청을 Https로 Redirect
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name bookg.site;
        server_tokens off;

        ssl_certificate /etc/letsencrypt/live/bookg.site/fullchain.pem;  # ssl 인증서 사용
        ssl_certificate_key /etc/letsencrypt/live/bookg.site/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # ignore cache frontend
        location ~* (service-worker\.js)$ {
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
            proxy_no_cache 1;
        }

        location / {
            root /var/www/frontend;
            try_files $uri $uri/ /index.html;
        }

        location /api/v1 {
            proxy_pass http://backend;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_redirect off;
            proxy_set_header Host $host;
        }

        location /ws {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_pass http://backend;
        }
    }
}